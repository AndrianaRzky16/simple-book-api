{"version":3,"sources":["index.js"],"names":["_express","_interopRequireDefault","require","_books","_middleware","app","use","express","requestLogger","requestModifier","set","get","req","res","name","render","books","setHeader","JSON","stringify","book","id","params","find","b","end","error","query","title","toLowerCase","includes","searchedBooks","post","newBook","body","push","success","writeHead","data","put","parseInt","bookIndex","findIndex","Object","assign","message","splice","port"],"mappings":"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","file":"index.min.js","sourcesContent":["import express from \"express\";\r\nimport books from \"./books.js\";\r\nimport {\r\n  timeLogger,\r\n  requestLogger,\r\n  requestModifier,\r\n  checkToken,\r\n} from \"./middleware.js\";\r\n\r\nconst app = express();\r\nconst port = 3000;\r\n\r\napp.use(express.json());\r\n\r\napp.use(timeLogger);\r\napp.use(requestLogger);\r\napp.use(requestModifier);\r\n// app.use(checkToken);\r\n\r\napp.set(\"view engine\", \"ejs\");\r\napp.set(\"views\", \"./views\");\r\n\r\n//routes / URL / utama kita method GET\r\n\r\napp.get(\"/profile\", (req, res) => {\r\n  res.render(\"profile\", { name: \"John Doe\" });\r\n});\r\n\r\napp.get(\"/web/books\", (req, res) => {\r\n  res.render(\"books\", { books });\r\n});\r\n\r\napp.get(\"/books\", (req, res) => {\r\n  console.log();\r\n  res.setHeader(\"Content-Type\", \"application/json\");\r\n  res.end(JSON.stringify(books));\r\n});\r\n\r\napp.get(\"/books/:id\", (req, res) => {\r\n  const id = parseInt(req.params.id);\r\n  const book = books.find((b) => b.id === id);\r\n\r\n  if (book) {\r\n    res.setHeader(\"Content-Type\", \"application/json\");\r\n    res.end(JSON.stringify(book));\r\n  } else {\r\n    res.setHeader(\"Content-Type\", \"application/json\");\r\n    res.end(JSON.stringify({ error: \"Book not found\" }));\r\n  }\r\n});\r\n\r\napp.get(\"/search\", (req, res) => {\r\n  if (req.query.title) {\r\n    const title = req.query.title.toLowerCase();\r\n    const searchedBooks = books.filter((b) =>\r\n      b.title.toLowerCase().includes(title)\r\n    );\r\n    res.setHeader(\"Content-Type\", \"application/json\");\r\n    res.end(JSON.stringify(searchedBooks));\r\n  } else {\r\n    res.setHeader(\"Content-Type\", \"application/json\");\r\n    res.end(JSON.stringify({ error: \"No search criteria provided\" }));\r\n  }\r\n});\r\n\r\n//POST\r\n\r\napp.post(\"/books\", (req, res) => {\r\n  const newBook = req.body;\r\n  books.push(newBook);\r\n  res.setHeader(\"Content-Type\", \"application/json\");\r\n\r\n  if (newBook) {\r\n    res.writeHead(201);\r\n    res.end(\r\n      JSON.stringify({\r\n        success: true,\r\n        message: \"Book added successfully\",\r\n        data: books,\r\n      })\r\n    );\r\n  } else {\r\n    res.writeHead(500);\r\n    res.end(JSON.stringify({ error: \"Failed to add book\" }));\r\n  }\r\n});\r\n\r\n//PUT\r\n\r\napp.put(\"/books/:id\", (req, res) => {\r\n  const id = parseInt(req.params.id);\r\n  const bookIndex = books.findIndex((b) => b.id === id);\r\n\r\n  if (bookIndex !== -1) {\r\n    Object.assign(books[bookIndex], req.body);\r\n    res.setHeader(\"Content-Type\", \"application/json\");\r\n    res.writeHead(200);\r\n    res.end(\r\n      JSON.stringify({\r\n        success: true,\r\n        message: \"Book updated successfully\",\r\n        data: books[bookIndex],\r\n      })\r\n    );\r\n  } else {\r\n    res.setHeader(\"Content-Type\", \"application/json\");\r\n    res.writeHead(404);\r\n    res.end(JSON.stringify({ error: \"Book not found\" }));\r\n  }\r\n});\r\n\r\n//Delete\r\n\r\napp.delete(\"/books/:id\", (req, res) => {\r\n  const id = parseInt(req.params.id);\r\n  const bookIndex = books.findIndex((b) => b.id === id);\r\n\r\n  if (bookIndex !== -1) {\r\n    books.splice(bookIndex, 1);\r\n    res.setHeader(\"Content-Type\", \"application/json\");\r\n    res.writeHead(200);\r\n    res.end(\r\n      JSON.stringify({\r\n        success: true,\r\n        message: \"Book deleted successfully\",\r\n        data: books,\r\n      })\r\n    );\r\n  } else {\r\n    res.setHeader(\"Content-Type\", \"application/json\");\r\n    res.writeHead(404);\r\n    res.end(JSON.stringify({ error: \"Book not found\" }));\r\n  }\r\n});\r\n\r\napp.delete( )\r\n\r\napp.use((req, res) => {\r\n  res.setHeader(\"Content-Type\", \"application/json\");\r\n  res.writeHead(405);\r\n  res.end(JSON.stringify({ error: \"Method Not Allowed\" }));\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server running at http://localhost:${port}/`);\r\n});\r\n"]}